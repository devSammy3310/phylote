// /* Define keyframes for animations */
// @keyframes moveInLeft {
//   0% {
//     opacity: 0;
//     transform: translateX(-10rem);
//   }
//   80% {
//     transform: translateX(10rem);
//   }
//   100% {
//     opacity: 1;
//     transform: translateX(0);
//   }
// }

// @keyframes moveInRight {
//   0% {
//     opacity: 0;
//     transform: translateX(10rem);
//   }
//   80% {
//     transform: translateX(-10rem);
//   }
//   100% {
//     opacity: 1;
//     transform: translateX(0);
//   }
// }

// @keyframes moveInBottom {
//   0% {
//     opacity: 0;
//     transform: translateY(10rem);
//   }
//   80% {
//     transform: translateY(-5rem);
//   }
//   100% {
//     opacity: 1;
//     transform: translateY(0);
//   }
// }

// /* Base class for elements */
// .animate {
//   opacity: 0;
//   visibility: hidden;  /* Keep element hidden until animation is triggered */
//   transform: translateY(10rem); /* Default transform effect (for bottom animation) */
//   transition: opacity 0.5s ease, transform 0.5s ease; /* Smooth transition */
// }

// /* Apply when the element enters the viewport */
// .animate.visible {
//   visibility: visible; /* Make it visible */
//   opacity: 1; /* Ensure element becomes fully opaque */
//   transform: translateY(0); /* Move the element to its final position */
// }

// /* Specific classes for animations */
// .animate.moveInLeft {
//   animation: moveInLeft 3s ease-in-out forwards;
// }

// .animate.moveInRight {
//   animation: moveInRight 3s ease-in-out forwards;
// }

// .animate.moveInBottom {
//   animation: moveInBottom 3s ease-in-out forwards;
// }

// Mixin centering elements
@mixin abscenter {
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%, -50%);
  transform: translate(-50%, -50%);
  margin: auto; // Fallback for older browsers
}

// Breakpoint Variables (in px)
$mini-phone: 380px;
$mini-phone-land: 700px;
$phone: 480px;
$phone-land: 900px;
$tab-port: 834px;
$tab-land: 1024px;
$laptop: 1440px;
$desktop: 1800px;

// Mixin for media queries
// ORDER: Base + typography > general layout + grid/flex > page layout > components
@mixin respond($breakpoint) {
  @if $breakpoint == mini-phone {
    @media (max-width: $mini-phone) {
      @content;
    }
  } @else if $breakpoint == mini-phone-land {
    @media (max-width: $mini-phone-land) {
      @content;
    }
  } @else if $breakpoint == phone {
    @media (max-width: $phone) {
      @content;
    }
  } @else if $breakpoint == phone-land {
    @media (max-width: $phone-land) {
      @content;
    }
  } @else if $breakpoint == tab-port {
    @media (max-width: $tab-port) {
      @content;
    }
  } @else if $breakpoint == tab-land {
    @media (max-width: $tab-land) {
      @content;
    }
  } @else if $breakpoint == laptop {
    @media (max-width: $laptop) {
      @content;
    }
  } @else if $breakpoint == desktop {
    @media (max-width: $desktop) {
      @content;
    }
  } @else if $breakpoint == big-desktop {
    @media (min-width: $desktop) {
      @content;
    }
  }
}
